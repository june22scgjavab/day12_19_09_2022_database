We are able to see a table/relation. Table is nothing but a combination of rows and columns.
Columns represent fields and row represent records/rows/tuples. id,ename,salary,bonus and
dept are fields or columns and the
1 James Potter 75000 1000 ICP , this one is an entire record. We can see multiple
records. So in the above table for the record whose id is 3 and Ename is
Emily Rayner, for that record the bonus in null ( undefined or unknown value). 
null in OOPS concept also.

public class Employee {}

Employee emp=null;

// The reference variable emp is not storing the reference of any newly or already created
// object.

emp=new Employee(); //now it is refering to a newly created object.

So in case of Object oriented programming null is used to initialise a reference variable
if we dont want to initialise the reference variable with an Object's reference ( address).
But in case of RDBMS (Relation Database Management System), null means undefined or unknown value.

Cardinality of a table/relation is number of rows/records/tuples. So the cardinality is 4. 

Degree of a table/relation is number of columns/fields/attributes. So in the example degree is 5.

Domain of a column is allowed value in a column. Example suppose we are looking for designations so the domain
for designation will be like Manager, Asst Manager, Developer, Analyst. So basically it is the allowed 
values in a particular column. Suppose we want to store Departments and the allowed values are Sales, Mkt, Development, HR.
So the domain values accepted for Department are Sales, Mkt, Development and HR.
So if we enter suppose stores, they wont be accepted. 


Candidate Key:- The minimal key combinations that can be used to identify a record uniquely.
Primary Key:-- Out of those keys which can identify a record, we select one of them as Primary key.
Alternate Key:--- Rest of the keys which are not primary key but was elgible for primary key.
----------------------------------------------------------------------------------------------------------------------------


courses 

courseId       description
C0001          Programming using Java
C0002          DBMS


students
employeeId  empname  
E0001       Jeenia
E0002       Lokesh
E0003       Sirish


result
employeeId courseId  score
E0001      C0001     70
E0001      C0002     80
E0002      C0001     86
E0002      C0002     90


---------------------------------------------------------------------------------------------------------------------
Primary key and foreign key names can be same or different.

employee_manager_details
empId================>Primary key
employeeName
dept
basic
mgrId================>Foreign key ====> primary key in the same table


E0001 Ravi   Sales 23000 null
E0002 Seema  Sales 14000 E0001
E0003 Ravi   Mkt   23000 null
E0004 Shreya Mkt   15000 E0003
E0006 Rahul  Mkt   16000 E0003
 
-----------------------------------------------------------------------------------------------------------------------------------
char(10)
hello_____



CREATE TABLE data(
  score NUMBER(3,1)
 )

   12.1 ===> total number of digit ( before and after decimal) ====> precision
   So how to decide how many digits we can have before decimal
    no_of_digits before decimal=precision-scale
   Scale in the number of digits after decimal





CREATE TABLE data(
  score NUMBER(3,1)
 )
 12.32===> here we are entering 2 digits in place of 1
 So ultimately we have to round of two the scale mentioned

 12.3

 12.36====>
 12.4 

 12.1
 12.1

 Before decimal , the number of digits allowed will be

 3-1=2 ( 2 digits will be allowed before decimal)

 123.3 ===> Error as we have entered 3 digits before decimal but we are allowed to enter the number of
         digits same ore lesser then the value which we got after subtracting scale from precision.

 12.3 ===> It will be stored
 1.3======>It will be stored

!= Not equal to
<>====> Not equal to
--------------------------------------------------------------------------------
IS SQL case sensitive?
Ans NO

We try to follow the convention as keywords we write in uppercase and identifiers we write in 
smallcase.

CREATE TABLE student(
roll INTEGER,
name VARCHAR2(20),
dob DATE
)

OR

create table student(
roll integer,
name varchar2(20),
dob date
) 
/*                                              
   In the above create statement we have not declared any primary key.

*/
To Drop a table , the command is
DROP TABLE <tablename>;
------------------------------------------------------------------------------------------------------------------------


CREATE TABLE Student ( 
    studentroll INTEGER CONSTRAINT stud_roll_pk PRIMARY KEY,
    name VARCHAR2(10), 
    dob DATE;
/*                                              
   In the above create statement we have declared roll as a primary key. 
*/

INSERT INTO student VALUES(1,'Ram','12-Feb-2000');
INSERT INTO student VALUES(1,'Ramesh','12-Oct-2000');  -- This record wont get inserted because it is having the same roll as record 1.
INSERT INTO student VALUES(2,'Ramesh','12-Oct-2000'); 
INSERT INTO student VALUES(NULL,'Suresh','16-Jan-1999'); -- This record wont get inserted because null value is not allowed for the primary key

CREATE TABLE marks (
    CourseId INTEGER, 
    roll INTEGER CONSTRAINT marks_roll_fk REFERENCES Student (studentroll), 
    MarksScored DECIMAL (5,2)
);


/* The above example is of relating two tables with primary key and foreign key.  
So here we can see the studentroll is a primary key in the Student table which is refered by roll of marks table.Which means
I cannot insert a roll in the marks table which is not existing in the Student table */

INSERT INTO marks VALUES(111,1,70);      -- This record will be inserted
INSERT INTO marks VALUES(222,5,89);      -- The record will not get inserted because the roll 5 is not present in the parent table
                                         -- student
-----------------------------------------------------------------------

After this try to drop the table student. Will you be able to drop the master or the parent table when we have some of the 
records mentioned in the child table from the master table?
Ans We cannot drop the master table which is Student here. 
ORA-02449: unique/primary keys in table referenced by foreign keys.

Reason for the error:

The values of the primary/unique key column(s) from the parent table are referred to in the foreign key column of the child table (referential integrity). This reference will
 not allow the master table to be dropped prior to the child table.

Is vice-versa is possible. Which means we will delete or drop child table. Is it possible?
Ans Yes. So the Child table can be dropped while it is refering to some record/records in the master or parent table.

Anways is it possible to drop the master table?
Yes
Step 1: Execute the DROP statement for Marks (child table) as given below:

DROP TABLE Marks;

Step 2: Execute the DROP statement for Student (parent table) as given below:

DROP TABLE Student;
Both the tables will be dropped successfully from the database.

Reason: When the child table is dropped first, the values that are referred to are removed. So, now the parent table can be dropped from the database without any error.

Conclusion: Drop all the child tables first, then drop all the parent tables.
-----------------------------------------------------------------------------------------------------------------------------------
An alternate method to drop table is given below:

DROP TABLE <Table name> CASCADE CONSTRAINTS;

Step 1: Execute the DROP statement for Student (parent table) as given below:

DROP TABLE Student CASCADE CONSTRAINTS;
Step 2: Execute the DROP statement for Marks (child table) as given below:


DROP TABLE Marks CASCADE CONSTRAINTS;
Both the tables will be dropped successfully from the database.

Reason: Since the referential integrity constraint is dropped from the parent table, the parent table can be dropped first, followed by the child table.

The primary key (Studentid) values of the parent table (Student) 1001 and 1002 are referred to in the foreign key (Studentid) of the child table (Marks). The clause CASCADE CONSTRAINTS will remove all referential integrity constraints that refer to the primary or unique keys in the table.

The referential integrity constraints that refer to the primary key (Studentid) values of the parent table (Student) 1001 and 1002 are removed. So, now the parent table (Student) can be dropped before the child table (Marks).

Conclusion: CASCADE CONSTRAINTS clause will drop all the referential integrity constraints that refer to the primary or unique keys in the table. Hence all the parent tables can be dropped before the child tables.

 ------------------------------------------------------------------------------------------------------------------------------------

*NOT NULL

*PRIMARY KEY

*CHECK

*UNIQUE

*FOREIGN KEY

We can also specify DEFAULT value for a column. Oracle database does not consider DEFAULT as a constraint.
-----------------------------------------------------------------------------------------------------------------------------
CREATE TABLE Student (
    StudentId INTEGER CONSTRAINT Stud_SId_nn NOT NULL,
    FName VARCHAR2(10) NOT NULL,
    LName VARCHAR2(10));
OR

CREATE TABLE Student (
    StudentId INTEGER  NOT NULL,
    FName VARCHAR2(10) NOT NULL,
    LName VARCHAR2(10));
  --------------------------------------------------------------------------------------------------------------

CREATE TABLE Student (
    StudentId INTEGER CONSTRAINT stud_id_pk  PRIMARY KEY,
    FName VARCHAR2(10),
    LName VARCHAR2(10));

In this case in StudentId, we wont be able to insert NULL value as it is a primary key.
But for rest of the columns in above example , we can insert the null value.

INSERT INTO Student VALUES(1,'Ravi',null);  ==> So by default excluding the primary key , in all other non-primary key , we can insert null value.
INSERT INTO Student(studentid,fname) VALUES(3,'Ashok');  => In this case we are not explicitly inserting the null as we are doing in the previous line. 

--------------------------------------------------------------------------------------------------------------------------------------------
Primary key

CREATE TABLE Student ( 
    StudentId INTEGER CONSTRAINT stud_sid_pk PRIMARY KEY,
    FName VARCHAR2(10), 
    ContactNo NUMBER(10));


INSERT INTO stydent VALUES(1,'Amar',76453210);
INSERT INTO stydent VALUES(null,'Neha',66453230);


In the above example we are trying to insert a null value in the table student id's where studentId is a primary key and we cannot insert null
value in the primary key.
Try to insert the same studentId as 1 for the 3rd insertion of record.

INSERT INTO stydent VALUES(1,'Kumar',76453210);

/* We get an error while inserting the record as we cannot insert the same StudentId which is already available in the table. */
-------------------------------------------------------------------------------------------------------------------------------------------
Check constraint

CREATE TABLE Student ( 
    StudentId INTEGER, 
    FName VARCHAR2(10), 
    Gender CHAR(1) CONSTRAINT Stud_gender_ck1 CHECK(Gender IN('M', 'F'))); 
)

/* In the above example we have applied a check constraint on Gender. Where we are expecting that only M or F can be inserted. 

INSERT INTO student VALUES(1,'Jiten','C'); -- the SQL statement while executing will show the error related to check constraint violation 
as we have to enter the data which are mentioned as the part of check constraint in the form of IN operator. So we can enter either M or F
for Gender but we tried inserting the character C in gender which is not permisible. */



CREATE TABLE Employee ( 
    StudentId INTEGER, 
    FName VARCHAR2(10), 
    Gender CHAR(1) CONSTRAINT Employee_gender_ck1 CHECK(Gender IN('M', 'F')),
    basic INTEGER CONSTRAINT Employee_basic_ck2 CHECK(basic>10000)

); 

 INSERT INTO Employee VALUESE(1,'Ravi','M',5000); -- Again error will be shown while executing this command because it violating the check constraint
where the basic is expected to be greater than 10000 but we are entering basic as 5000 which is lesser than the value mentioned in the check constraint for basic.
INSERT INTO Employee VALUESE(1,'Ravi','M',15000); -- This record will be accepted as M is valid data for the check constraint mentioned for gender
 and 15000 is a valid data as a part of check constraint for basic as basic should ne more than 10000.

----------------------------------------------------------------------------------------------------------------------------------------


UNIQUE constraint on a column ensures that two rows in a table cannnot have same value in that column. Unlike Primary Key, UNIQUE constraint allows NULL values. A table can have many UNIQUE constraints whereas per table we can have only one primary key.
--------------------------------------------------------------------------------------------------------------------------------------

